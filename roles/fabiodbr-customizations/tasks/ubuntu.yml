---
- name: "sudoers: Don't prompt for password"
  when: '"sudoers" is defined and "sudoers" in configure'
  lineinfile:
    path: /etc/sudoers
    line: "{{ user }} ALL=(ALL) NOPASSWD:ALL"
    insertafter: EOF
    validate: "/usr/sbin/visudo -cf %s"

- name: "Remove Ubuntu Dock"
  when: '"remove-ubuntu-dock" is defined and "remove-ubuntu-dock" in configure'
  apt:
    name: gnome-shell-extension-ubuntu-dock
    state: absent

- name: Use gnome keyring credential helper (gui password prompt)
  when: '"gnome-keyring-credential-helper" is defined and "gnome-keyring-credential-helper" in configure'
  block:
    - name: "[gnome-keyring-credential-helper]: packages"
      apt:
        name: "{{ item }}"
        state: latest
      loop:
        - libsecret-1-0
        - libsecret-1-dev
    - name: "[gnome-keyring-credential-helper]: verify if already compiled"
      stat:
        path: /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret
      register: git_credential
    - name: "[gnome-keyring-credential-helper]: build library"
      when: not git_credential.stat.exists
      make:
        chdir: /usr/share/doc/git/contrib/credential/libsecret
        target: all
    - name: "configure git global credential.helper"
      become: yes
      become_user: "{{ user }}"
      git_config:
        name: credential.helper
        scope: global
        value: '/usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret'
      changed_when: False

# - name: zsh themes
#   git:
#     repo: https://github.com/romkatv/powerlevel10k.git
#     dest: /tmp/
#     depth: 1

- name: Terminator with Nord theme
  when: '"terminator-nord-theme" is defined and "terminator-nord-theme" in configure'
  block:
    - name: "Terminator config file"
      stat:
        path: "/home/{{ user }}/.config/terminator/config"
      register: terminator_config
    - name: "terminator: nord theme"
      when: not terminator_config.stat.exists
      block:
        - name: "Terminator: create config directory"
          file:
            path: "/home/{{ user }}/.config/terminator"
            state: directory
            owner: "{{ user }}"
            group: "{{ user }}"
            mode: 0755
        - name: "Terminator: git clone"
          git:
            repo: https://github.com/arcticicestudio/nord-terminator.git
            dest: /tmp/nord
            depth: 1
            force: yes
        - name: "Terminator: copy"
          copy:
            src: "/tmp/nord/src/config"
            dest: "/home/{{ user }}/.config/terminator/config"
            owner: "{{ user }}"
            group: "{{ user }}"
            mode: 0644
        - name: "Terminator: replace"
          replace:
            dest: "/home/{{ user }}/.config/terminator/config"
            regexp: "nord"
            replace: "default"
        - name: "Terminator: lineinfile"
          lineinfile:
            dest: "/home/{{ user }}/.config/terminator/config"
            regexp: "^background_color"
            insertafter: "^background_color"
            line: "    {{ item.property }} = {{ item.value }}"
          loop:
            - { property: "background_darkness", value: "0.9" }
            - { property: "background_type", value: "transparent" }
            - { property: "scrollback_lines", value: "50000" }
            - { property: "font", value: "Liberation Mono 8" }
            - { property: "use_system_font", value: "False" }

- name: Powerline-Shell
  when: '"bash-powerline-shell" is defined and "bash-powerline-shell" in install'
  block:
    - name: Install powerline-shell
      pip:
        name: powerline-shell
        state: latest
    - name: install powerline fonts
      apt:
        name: "fonts-powerline"
        state: latest
    - name: Enable powerline-shell
      blockinfile:
        path: /etc/bash.bashrc
        insertafter: EOF
        content: |
          function _update_ps1() {
            PS1=$(powerline-shell $?)
          }
          if [[ $TERM != linux && ! $PROMPT_COMMAND =~ _update_ps1 ]]; then
            PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
          fi

- name: "Ram storage for /tmp directory"
  when: '"tmp-mount" is defined and "tmp-mount" in install'
  block:
    - name: Copy tmp.mount template
      copy:
        src: /usr/share/systemd/tmp.mount
        dest: /etc/systemd/system/tmp.mount
    - name: Enable tmp.mount service
      systemd:
        name: tmp.mount
        enabled: yes
