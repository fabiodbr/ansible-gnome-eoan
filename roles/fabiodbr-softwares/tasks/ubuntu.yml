---
- name: System upgrade
  apt:
    upgrade: "yes"
    update_cache: yes
    cache_valid_time: 3600
    dpkg_options: "force-confold,force-confdef"

- name: "Proprietary GPU Drivers"
  when: '"graphics-drivers" is defined and "graphics-drivers" in install'
  ignore_errors: yes
  block:
    - name: "[graphics-drivers] Adding PPA"
      apt_repository:
        repo: "ppa:graphics-drivers/ppa"
        validate_certs: no
    - name: "[graphics-drivers] Installing"
      apt:
        upgrade: "yes"
        update_cache: yes

- name: Packages
  when: '"base-packages" is defined and "base-packages" in install'
  block:
    - name: "[base-packages]: Generic packages."
      apt:
        dpkg_options: "force-confold,force-confdef"
        autoremove: yes
        name: "{{ item }}"
        state: latest
      loop:
        - p7zip-full #compression
        - vim #editor
        - git #versioning
        - lm-sensors #sensor
        - curl #tool
        - apt-transport-https
        - ca-certificates
        - software-properties-common
        - tilix #terminal
        - deluge #torrent
        - htop #tool
        - asciinema #terminal recording
        - httpie #curl
        - expect #tool
        - ubuntu-restricted-extras #extra packages
        - gettext #
        - vlc #video player
        - ansible-lint #ansible linter
        - direnv
        - ondir
        - neofetch #bash eyecandy
        - bash-completion
        - glances #monitoring
        - rsync #file tool
        - sysstat #monitoring
        - debian-goodies
        - debsecan #pgp
        - scdaemon #pgp
        - kleopatra #pgp gui
        - ipcalc #networking
        - screenfetch #screenshot
    - name: "[base-packages]: Gnome stuff"
      apt:
        name: "{{ item }}"
        state: latest
        dpkg_options: "force-confdef,force-confold"
        cache_valid_time: 3600
      loop:
        - gnome-tweak-tool
        - gnome-shell-extensions
        - gnome-themes-standard
        - gnome-shell-extensions
        - gnome-shell-extension-weather

- name: Python 3
  tags: programming, python
  when: '"python3-packages" is defined and "python3-packages" in install'
  block:
    - name: "[python3-packages]: Install Python 3"
      apt:
        dpkg_options: "force-confold,force-confdef"
        autoremove: yes
        cache_valid_time: 3600
        name: "{{ item }}"
        state: latest
      loop:
        - python3
        - python3-pip
    - name: "[python3-packages]: installing pip3 packages"
      pip:
        name: "{{ item }}"
      loop:
        - http-prompt

# Broken
# - name: Gimp
#   when: '"gimp" in install'
#   block:
#     - name: "[gimp]: ppa"
#       apt_repository:
#         repo: "ppa:otto-kesselgulasch/gimp"
#         validate_certs: no
#     - name: "[gimp]: apt install"
#       apt:
#         name: gimp
#         state: latest
#         cache_valid_time: 3600

- name: Google Chrome
  tags: chrome
  when: '"chrome" is defined and "chrome" in install'
  block:
    - name: "[chrome]: apt-keys"
      apt_key:
        url: "https://dl-ssl.google.com/linux/linux_signing_key.pub"
        state: present
    - name: "[chrome]: repository"
      apt_repository:
        repo: "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
        filename: "google-chrome"
    - name: "[chrome]: install google chrome"
      apt:
        name: google-chrome-stable
        state: latest
    - name: "[chrome]: gnome-shell integrations"
      apt:
        name: chrome-gnome-shell
        state: latest

- name: Docker Community Edition
  when: '"docker" is defined and "docker" in install'
  block:
    - name: "docker-ce: remove snap if present"
      snap:
        name: docker
        state: absent
    - name: "docker-ce: essential packages"
      apt:
        name: "{{ item }}"
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
    - name: "docker-ce: apt-keys"
      apt_key:
        url: "https://download.docker.com/linux/ubuntu/gpg"
        state: present
    - name: "docker-ce: add repository"
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
        state: present
    - name: "docker-ce: install"
      apt:
        name: docker-ce
        state: present
    - name: "docker-ce: docker group"
      group:
        name: docker
        state: present
    - name: "docker-ce: add {{ user }} to docker group"
      user:
        name: "{{ user }}"
        groups: "docker"
        append: yes

- name: R
  tags: programming, R
  when: '"R" is defined and "R" in install'
  block:
    - name: "R: keyserver"
      apt_key:
        keyserver: "keyserver.ubuntu.com"
        id: "E298A3A825C0D65DFD57CBB651716619E084DAB9"
        state: present
    - name: "R: apt-repository"
      apt_repository:
        repo: "deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran35/"
        validate_certs: no
    - name: "R: packages"
      apt:
        name: "{{ item }}"
        state: latest
        cache_valid_time: 3600
      loop:
        - libssl-dev
        - libcurl4-openssl-dev
        - r-base

- name: google-cloud-sdk
  when: '"google-cloud-sdk" is defined and "google-cloud-sdk" in install'
  tags: cli, google, devops
  block:
    - name: "[google-cloud-sdk]: packages"
      apt:
        name: apt-transport-https
        cache_valid_time: 3600
        state: present
    - name: "[google-cloud-sdk]: apt-key"
      apt_key:
        url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
        keyring: "/usr/share/keyrings/cloud.google.gpg"
        state: present
    - name: "[google-cloud-sdk]: repository"
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main"
#        filename: "google-chrome"
    - name: "[google-cloud-sdk]: packages"
      apt:
        name: "{{ item }}"
        state: latest
      loop:
        - google-cloud-sdk
        - kubectl

- name: R Studio {{ rstudio_version }}
  when: '"R" is defined and "R" in install'
  tags: programming, R, ide, rstudio
  ignore_errors: yes
  block:
    - name: "R Studio: packages facts"
      package_facts:
        manager: auto
    - debug:
        var: "ansible_facts.packages['rstudio'][0].version"
        verbosity: 4
    - name: "R Studio: install" #TODO: debug
      apt:
        deb: "https://download1.rstudio.org/desktop/bionic/amd64/rstudio-{{ rstudio_version }}-amd64.deb"
        state: present
      when: "ansible_facts.packages['rstudio'][0].version != rstudio_version"

- name: Anaconda
  tags: programming, anaconda
  when: '"anaconda" is defined and "anaconda" in install'
  block:
    - name: "Anaconda: verify if already installed"
      stat:
        path: /opt/anaconda3/bin
      register: anaconda
    - name: "Install Anaconda"
      when: not anaconda.stat.exists
      block:
        - name: "Anaconda: prerequisites"
          apt:
            name: "{{ item }}"
            update_cache: yes
            cache_valid_time: 3600
          loop:
            - libgl1-mesa-glx
            - libegl1-mesa
            - libxrandr2
            - libxss1
            - libxcursor1
            - libxcomposite1
            - libasound2
            - libxi6
            - libxtst6
        - name: "Anaconda: Verify if already downloaded"
          stat:
            path: "/tmp/Anaconda3-2019.10-Linux-x86_64.sh"
            checksum_algorithm: md5
          register: anaconda_downloaded
        - name: "Anaconda: Download"
          when: "not anaconda_downloaded.stat.exists or anaconda_downloaded.stat.md5 != anaconda_md5"
          get_url:
            url: "{{ anaconda_url }}"
            dest: "/tmp/{{ anaconda_md5 }}.sh"
            checksum: "md5:{{ anaconda_md5 }}"
            mode: 0550
        - name: "Anaconda: Install"
          command: "bash /tmp/{{ anaconda_md5 }}.sh -b -p /opt/anaconda3"
        - name: "Anaconda: add /opt/anaconda3/bin to PATH"
          lineinfile:
            path: /etc/profile
            state: present
            line: "PATH=$PATH:/opt/anaconda3/bin"
        - name: "Anaconda: changing /opt/anaconda3 ownership to {{ user }}"
          file:
            path: /opt/anaconda3
            state: directory
            owner: "{{ user }}"
            group: "{{ user }}"
            mode: 0755
            recurse: yes

- name: Terminator
  when: '"terminator" is defined and "terminator" in install'
  block:
    - name: "Terminator: ppa repository"
      apt_repository:
        repo: "ppa:gnome-terminator/nightly-gtk3"
        validate_certs: no
        codename: trusty
    - name: "Terminator: install"
      apt:
        name: terminator
        state: latest
        cache_valid_time: 3600

- name: VirtualBox
  tags: virtualbox
  when: '"virtualbox" is defined and "virtualbox" in install'
  block:
    - name: "virtualbox: apt-keys"
      apt_key:
        url: "{{ item }}"
        state: present
      loop:
        - "https://www.virtualbox.org/download/oracle_vbox_2016.asc"
        - "https://www.virtualbox.org/download/oracle_vbox.asc"
    - name: "virtualbox: repository"
      apt_repository:
        repo: "deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian focal contrib"
    - name: "virtualbox: upgrade"
      apt:
        upgrade: "yes"
        update_cache: yes
    - name: "virtualbox: install"
      apt:
        name: virtualbox
        state: latest

- name: VSCode
  when: '"vscode" is defined and "vscode" in install'
  tags: programming, vscode
  block:
    - name: "[VSCode]: Installing requirements"
      apt:
        name: "{{ item }}"
        state: latest
      loop:
        - software-properties-common
        - apt-transport-https
        - wget
    - name: "[VSCode]: Downloading GPG keys"
      apt_key:
        url: "https://packages.microsoft.com/keys/microsoft.asc"
        state: present
    - name: "[VSCode]: Adding repository"
      apt_repository:
        repo: "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
        filename: "vscode"
    - name: "[VSCode]: Install"
      apt:
        name: "code"
        state: latest

- name: "[Keybase]: Install"
  when: '"keybase" is defined and "keybase" in install'
  apt:
    deb: "https://prerelease.keybase.io/keybase_amd64.deb"
    state: present
